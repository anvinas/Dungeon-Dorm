openapi: 3.0.0
info:
  title: Dungeon Dorms API
  version: 1.0.0
  description: API documentation for authentication, user, and fight endpoints.

servers:
  - url: http://localhost:5000/api

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gamerTag:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required: [gamerTag, email, password]
      responses:
        '200':
          description: User registered successfully
        '400':
          description: Missing or duplicate data

  /auth/login:
    post:
      summary: Login and receive a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                gamerTag:
                  type: string
                password:
                  type: string
              required: [gamerTag, password]
      responses:
        '200':
          description: Login successful
        '400':
          description: Invalid credentials

  /auth/find-user:
    post:
      summary: Find user profile (protected)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile returned
        '400':
          description: User ID not provided
        '404':
          description: User profile not found

  /auth/profile:
    get:
      summary: Get authenticated user's profile (protected)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile returned
        '404':
          description: User profile not found

  /auth/inventory:
    get:
      summary: Get user inventory (test)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Inventory returned

    post:
      summary: Add item to inventory (test)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Item added

  /user/select-character:
    post:
      summary: Select a character class for the user (one-time, protected)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                characterClassId:
                  type: string
              required: [characterClassId]
      responses:
        '200':
          description: Character selected
        '400':
          description: Character already selected or missing data

  /user/enemies:
    post:
      summary: Return all enemies, including bosses and common enemies
      responses:
        '200':
          description: List of all bosses, common enemies, their stats, and items returned

  /user/enemy:id:
    post:
      summary: Fetch boss or enemy by ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Boss or enemy returned
        '404':
          description: Not found

  /fight/startEncounter:
    post:
      summary: Start a new encounter (protected), should be used before any turns
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enemyType:
                  type: string
                  enum: [boss, common_enemy]
                enemyId:
                  type: string
              required: [enemyType, enemyId]
      responses:
        '200':
          description: Encounter started
        'message':
          type: string
          description: User already has an active encounter

  /fight/userTurn:
    post:
      summary: User takes a turn in an encounter (protected)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                action:
                  type: string
                  enum: [attack, item, talk, flee]
                item:
                  type: object
      responses:
        '200':
          description: Turn processed, showing user/enemy defeat. If no one is defeated, returns total turn info. Prompts frontend for user levelup

  /fight/levelup:
    post:
      summary: Level up the user (protected), should be used if userTurn prompts to do so
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User leveled up, returns new stats and attributes.

  /fight/getActiveEncounter:
    post:
      summary: Get the user's active encounter (protected), should be used after login (ignore activityState, does not work as intended atm)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active encounter returned
        '404':
          description: No active encounter found

  /user/fetch-user:
    post:
      summary: Fetch the authenticated user's profile
      description: Returns the user's profile with sensitive fields excluded. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile returned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                      gamerTag:
                        type: string
                      level:
                        type: integer
                      Currency:
                        type: integer
                      CurrentLoot:
                        type: array
                        items:
                          type: object
                          properties:
                            itemId:
                              type: string
                            quantity:
                              type: integer
                      Character:
                        type: string
                      Bosses:
                        type: array
                        items:
                          type: string
                      currentActiveBoss:
                        type: string
        '404':
          description: User profile not found or JSON header incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error fetching user profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    
  /user/delete-user-progress:
    post:
      summary: Reset a user's progress to initial state
      description: Resets the user's level, bosses, currency, inventory, character, stats, HP, XP, and sets the next boss. Requires authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User progress reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User progress has been reset successfully.
                  userProfile:
                    type: object
                    properties:
                      gamerTag:
                        type: string
                      level:
                        type: integer
                      currency:
                        type: integer
                      currentLoot:
                        type: array
                        items:
                          type: object
                          properties:
                            itemId:
                              type: string
                            quantity:
                              type: integer
                      character:
                        type: string
                        nullable: true
                      currentStats:
                        type: object
                        properties:
                          strength:
                            type: integer
                          dexterity:
                            type: integer
                          intelligence:
                            type: integer
                          charisma:
                            type: integer
                          defense:
                            type: integer
                      maxHP:
                        type: integer
                      currentHP:
                        type: integer
                      currentXP:
                        type: integer
                      toLevelUpXP:
                        type: integer
                      currentBoss:
                        type: string
                        nullable: true
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Server error resetting user progress
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: https
      scheme: bearer
      bearerFormat: JWT